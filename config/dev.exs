import Config

# Disable the weatherflow tempest udp listener in dev mode, as we'll prefer our fake emitter instead.
# You can change this, and instead disable the fake emitter in application.ex if you have a Weatherflow device
# available in the dev environment.
config :weatherflow_tempest, callbacks_only: true

# Enable the fake weather stations so we can test the GUI without having real devices available.
config :weather_moss, enable_fake_weather_stations: true

config :weather_moss, WeatherMoss.Scheduler,
 jobs: [
   # Every 1 minutes save the data from the specified PurpleAir device
   {"*/1 * * * *", {WeatherFlow.PurpleAir.DataLogger, :fetch_and_save, ["http://localhost:4000/dev/fake/purpleair"]}},
 ]

# Configure your database
config :weather_moss, WeatherMoss.MeteobridgeRepo,
  protocol: :tcp,
  hostname: "127.0.0.1",
  port: 23306,
  username: "root",
  password: "weathermossdeveloper",
  database: "weather_moss_dev",
  stacktrace: true,
  show_sensitive_data_on_connection_error: true,
  pool_size: 10


config :weather_moss, WeatherMoss.Repo,
       database: "weather_moss_dev",
       username: "postgres",
       password: "weathermossdeveloper",
       hostname: "localhost",
       port: 51423


# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we can use it
# to bundle .js and .css sources.
config :weather_moss, WeatherMossWeb.Endpoint,
  # Binding to loopback ipv4 address prevents access from other machines.
  # Change to `ip: {0, 0, 0, 0}` to allow access from other machines.
  http: [ip: {127, 0, 0, 1}, port: 4000],
  check_origin: false,
  code_reloader: true,
  debug_errors: true,
  secret_key_base: "XEOj4UO8gpdK5deW65B+ysJJOeTre5jjbxZVjqSHp0tcW1LpB2pxZvgd9R5ysHGQ",
  watchers: [
    esbuild: {Esbuild, :install_and_run, [:default, ~w(--sourcemap=inline --watch)]},
    tailwind: {Tailwind, :install_and_run, [:default, ~w(--watch)]}
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :weather_moss, WeatherMossWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/weather_moss_web/(controllers|live|components)/.*(ex|heex)$"
    ]
  ]

# Enable dev routes for dashboard and mailbox
config :weather_moss, dev_routes: true

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

# Disable swoosh api client as it is only required for production adapters.
config :swoosh, :api_client, false
